Index: src/DisplayWindow.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import javax.swing.*;\r\nimport java.awt.*;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * This class is the main window of the game.\r\n * It contains all the components needed to display a game window.\r\n *\r\n * @extends  {<a href=\"https://docs.oracle.com/javase/8/docs/api/javax/swing/JFrame.html\">JFrame</a>}\r\n */\r\npublic class DisplayWindow extends JFrame {\r\n\r\n    JPanel playerOneArea = new JPanel();JPanel boardArea = new JPanel();JPanel playerTwoArea = new JPanel();\r\n    String player = \"O\";\r\n    JButton[][] matrix = new JButton[3][3];\r\n\r\n    JPanel winArea = new JPanel();\r\n    int counter = 0;\r\n    int playerOneScore = 0;JTextArea playerOneData = new JTextArea(\"Player One\\n\\nScore: \" + playerOneScore);\r\n    int playerTwoScore = 0;JTextArea playerTwoData = new JTextArea(\"Player Two\\n\\nScore: \" + playerTwoScore);\r\n\r\n    /**\r\n     * This method is the constructor of the DisplayWindow class\r\n     * @param title the title of the window\r\n     */\r\n    public DisplayWindow(String title){\r\n        setIconImage(new ImageIcon(getClass().getResource(\"/images/icon.png\")).getImage());\r\n        setSize(1000, 600);\r\n        setTitle(title);\r\n        setLayout(new BorderLayout());\r\n        setDefaultCloseOperation(DISPOSE_ON_CLOSE);\r\n        setLocationRelativeTo(null);\r\n\r\n        add(playerOneArea, BorderLayout.WEST);add(boardArea, BorderLayout.CENTER);add(playerTwoArea, BorderLayout.EAST);\r\n\r\n        playerOneArea.setFont(new Font(\"Arial\", Font.ITALIC, 80));\r\n        playerOneData.setEditable(false);playerOneData.setFont(new Font(\"Arial\", Font.PLAIN, 25));playerOneData.setBackground(null);playerOneArea.add(playerOneData);\r\n        playerOneArea.setBackground(Color.green);\r\n        playerOneArea.setBorder(BorderFactory.createLineBorder(Color.BLACK));\r\n        playerTwoData.setEditable(false);playerTwoData.setFont(new Font(\"Arial\", Font.PLAIN, 25));playerTwoData.setBackground(null);playerTwoArea.add(playerTwoData);\r\n        playerTwoArea.setBorder(BorderFactory.createLineBorder(Color.BLACK));\r\n\r\n\r\n        boardArea.setLayout(new GridLayout(3,3));\r\n        for (int i = 0; i < 3; i++) {\r\n            for (int j = 0; j < 3; j++) {\r\n                matrix[i][j] = new JButton();\r\n                matrix[i][j].setFont(new Font(\"Arial\", Font.BOLD, 80));\r\n                int finalI = i;\r\n                int finalJ = j;\r\n                matrix[i][j].addActionListener(e -> updateBoard(finalI, finalJ));\r\n                boardArea.add(matrix[i][j]);\r\n            }\r\n        }\r\n\r\n\r\n\r\n        setVisible(true);\r\n    }\r\n\r\n    /**\r\n     * Method that processes the gameplay of the game.\r\n     * Displays button text based on which player pressed it.\r\n     * Determines if either player has won the game, if not, changes the player\r\n     *\r\n     * @param row the row of the button that was pressed\r\n     * @param col the column of the button that was pressed\r\n     */\r\n    public void updateBoard(int row, int col){\r\n        counter++;\r\n        matrix[row][col].setText(player);\r\n        matrix[row][col].setEnabled(false);\r\n\r\n        boolean diagonalOne = true;boolean diagonalTwo = true;\r\n        for (int i = 0; i < 3; i++) {\r\n            if(matrix[i][0].getText().equals(player) && matrix[i][1].getText().equals(player) && matrix[i][2].getText().equals(player)){\r\n                winScreen();\r\n            }\r\n            if(matrix[0][i].getText().equals(player) && matrix[1][i].getText().equals(player) && matrix[2][i].getText().equals(player)){\r\n                winScreen();\r\n            }\r\n            if(!matrix[i][i].getText().equals(player)) diagonalOne = false;\r\n            if(!matrix[i][2-i].getText().equals(player)) diagonalTwo = false;\r\n        }\r\n        if(diagonalOne || diagonalTwo) winScreen();\r\n        if(counter == 9){restart();}\r\n\r\n        switch (player) {\r\n            case \"O\" -> {\r\n                player = \"X\";\r\n                playerOneArea.setBackground(Color.gray);\r\n                playerTwoArea.setBackground(Color.green);\r\n            }\r\n            case \"X\" -> {\r\n                player = \"O\";\r\n                playerOneArea.setBackground(Color.green);\r\n                playerTwoArea.setBackground(Color.gray);\r\n            }\r\n        }\r\n        if(player.equals(\"X\")) {\r\n            System.out.println(\"\\n\\n_________________________________\\n\\n\");\r\n            long memory = Runtime.getRuntime().totalMemory()-Runtime.getRuntime().freeMemory();\r\n            int[] bestCoord = Computationals.findBestMove(matrix, \"X\");\r\n            long afterMemory = Runtime.getRuntime().totalMemory()-Runtime.getRuntime().freeMemory();\r\n            System.out.println(\"Used memory: \" + (afterMemory-memory)/1e+6+\" MB\");\r\n            matrix[bestCoord[0]][bestCoord[1]].doClick();\r\n            player = \"O\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This method is used to display the win screen.\r\n     */\r\n    public void winScreen(){\r\n        switch (player) {case \"O\" -> playerOneScore++;case \"X\" -> playerTwoScore++;}\r\n        playerOneData.setText(\"Player One\\n\\nScore: \" + playerOneScore);\r\n        playerTwoData.setText(\"Player Two\\n\\nScore: \" + playerTwoScore);\r\n\r\n        this.remove(boardArea);\r\n        winArea.removeAll();\r\n        winArea.add(new JLabel(\"Player \" + (player.equals(\"O\")? \"One\" : \"Two\") + \" is the winner\")).setFont(new Font(\"Times New Roman\", Font.BOLD, 50));\r\n\r\n        JButton restartButton = new JButton(\"Restart Game\");\r\n        restartButton.addActionListener(e -> restart());\r\n        winArea.add(restartButton);\r\n\r\n        this.add(winArea, BorderLayout.CENTER);\r\n        this.setSize(1000, 601);this.setSize(1000, 600);\r\n    }\r\n\r\n    /**\r\n     * This method is used to restart the game when a player has won the game or a tie occurs.\r\n     */\r\n    public void restart() {\r\n        this.remove(winArea);\r\n        boardArea.removeAll();\r\n        this.add(boardArea, BorderLayout.CENTER);\r\n\r\n        counter = 0;\r\n        for (int i = 0; i < 3; i++) {\r\n            for (int j = 0; j < 3; j++) {\r\n                matrix[i][j] = new JButton();\r\n                matrix[i][j].setFont(new Font(\"Arial\", Font.BOLD, 80));\r\n                int finalI = i;\r\n                int finalJ = j;\r\n                matrix[i][j].addActionListener(e -> updateBoard(finalI, finalJ));\r\n                boardArea.add(matrix[i][j]);\r\n\r\n            }\r\n        }\r\n\r\n\r\n        this.setSize(1000, 601);this.setSize(1000, 600);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DisplayWindow.java b/src/DisplayWindow.java
--- a/src/DisplayWindow.java	
+++ b/src/DisplayWindow.java	
@@ -19,6 +19,8 @@
     int playerOneScore = 0;JTextArea playerOneData = new JTextArea("Player One\n\nScore: " + playerOneScore);
     int playerTwoScore = 0;JTextArea playerTwoData = new JTextArea("Player Two\n\nScore: " + playerTwoScore);
 
+    long startMemory = Runtime.getRuntime().totalMemory()-Runtime.getRuntime().freeMemory();
+
     /**
      * This method is the constructor of the DisplayWindow class
      * @param title the title of the window
@@ -102,7 +104,8 @@
             long memory = Runtime.getRuntime().totalMemory()-Runtime.getRuntime().freeMemory();
             int[] bestCoord = Computationals.findBestMove(matrix, "X");
             long afterMemory = Runtime.getRuntime().totalMemory()-Runtime.getRuntime().freeMemory();
-            System.out.println("Used memory: " + (afterMemory-memory)/1e+6+" MB");
+            //System.out.println("Used memory: " + (afterMemory-memory)/1e+6+" MB");
+            //System.out.println("Total Free Memory: " + (Runtime.getRuntime().freeMemory())/1e+6+" MB");
             matrix[bestCoord[0]][bestCoord[1]].doClick();
             player = "O";
         }
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"5476bd4c-3655-4bf3-a38f-004b52db93f1\" name=\"Changes\" comment=\"Kinda Working\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/Computationals.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Computationals.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/DisplayWindow.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/DisplayWindow.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"master\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 6\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2VmP5tRhF6qMdkUzQILZdmddISq\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\r\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;AIPlayer&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;project.structure.last.edited&quot;: &quot;Project&quot;,\r\n    &quot;project.structure.proportion&quot;: &quot;0.0&quot;,\r\n    &quot;project.structure.side.proportion&quot;: &quot;0.0&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;advanced.settings&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"TicTacToe\" type=\"Application\" factoryName=\"Application\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"TicTacToe\" />\r\n      <module name=\"ticTacToe\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"5476bd4c-3655-4bf3-a38f-004b52db93f1\" name=\"Changes\" comment=\"\" />\r\n      <created>1695438103718</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1695438103718</updated>\r\n      <workItem from=\"1695438104748\" duration=\"103000\" />\r\n      <workItem from=\"1695438240652\" duration=\"106000\" />\r\n      <workItem from=\"1695438524353\" duration=\"96000\" />\r\n      <workItem from=\"1695439522253\" duration=\"162000\" />\r\n      <workItem from=\"1695439752291\" duration=\"90000\" />\r\n      <workItem from=\"1695439934105\" duration=\"141000\" />\r\n      <workItem from=\"1695440091427\" duration=\"40000\" />\r\n      <workItem from=\"1695440167729\" duration=\"20000\" />\r\n      <workItem from=\"1695440196766\" duration=\"69000\" />\r\n      <workItem from=\"1695440277609\" duration=\"1507000\" />\r\n      <workItem from=\"1695441820651\" duration=\"1470000\" />\r\n      <workItem from=\"1695443346347\" duration=\"225000\" />\r\n      <workItem from=\"1695443611561\" duration=\"17269000\" />\r\n      <workItem from=\"1695665337205\" duration=\"146000\" />\r\n      <workItem from=\"1695837592285\" duration=\"44000\" />\r\n      <workItem from=\"1695837871780\" duration=\"23000\" />\r\n      <workItem from=\"1695841828100\" duration=\"18000\" />\r\n      <workItem from=\"1695842002814\" duration=\"611000\" />\r\n      <workItem from=\"1695868628467\" duration=\"766000\" />\r\n      <workItem from=\"1695870328032\" duration=\"14000\" />\r\n      <workItem from=\"1696010481599\" duration=\"15000\" />\r\n      <workItem from=\"1696268016892\" duration=\"114000\" />\r\n      <workItem from=\"1696269768001\" duration=\"3132000\" />\r\n      <workItem from=\"1696275920636\" duration=\"7299000\" />\r\n      <workItem from=\"1696387534691\" duration=\"10003000\" />\r\n      <workItem from=\"1696471928023\" duration=\"16101000\" />\r\n      <workItem from=\"1696863132156\" duration=\"5834000\" />\r\n      <workItem from=\"1697221399362\" duration=\"2819000\" />\r\n      <workItem from=\"1697306908350\" duration=\"5908000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Fist Commit\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1695449571210</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1695449571210</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Added replayability\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1695491153465</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1695491153465</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Win Counter and Window Icon\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1695497139730</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1695497139730</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"X Player in AI\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1696284569430</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1696284569430</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"Kinda Working\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1696389304038</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1696389304038</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Kinda Working\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1696741469186</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1696741469186</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"7\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n    <MESSAGE value=\"Fist Commit\" />\r\n    <MESSAGE value=\"Added replayability\" />\r\n    <MESSAGE value=\"Win Counter and Window Icon\" />\r\n    <MESSAGE value=\"X Player in AI\" />\r\n    <MESSAGE value=\"Kinda Working\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Kinda Working\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	
+++ b/.idea/workspace.xml	
@@ -4,7 +4,7 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="5476bd4c-3655-4bf3-a38f-004b52db93f1" name="Changes" comment="Kinda Working">
+    <list default="true" id="5476bd4c-3655-4bf3-a38f-004b52db93f1" name="Changes" comment="AI Mostly Working, can still beat it occasionally :(">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/Computationals.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Computationals.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/DisplayWindow.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/DisplayWindow.java" afterDir="false" />
@@ -104,7 +104,7 @@
       <workItem from="1696471928023" duration="16101000" />
       <workItem from="1696863132156" duration="5834000" />
       <workItem from="1697221399362" duration="2819000" />
-      <workItem from="1697306908350" duration="5908000" />
+      <workItem from="1697306908350" duration="7980000" />
     </task>
     <task id="LOCAL-00001" summary="Fist Commit">
       <option name="closed" value="true" />
@@ -154,7 +154,15 @@
       <option name="project" value="LOCAL" />
       <updated>1696741469186</updated>
     </task>
-    <option name="localTasksCounter" value="7" />
+    <task id="LOCAL-00007" summary="AI Mostly Working, can still beat it occasionally :(">
+      <option name="closed" value="true" />
+      <created>1697340342224</created>
+      <option name="number" value="00007" />
+      <option name="presentableId" value="LOCAL-00007" />
+      <option name="project" value="LOCAL" />
+      <updated>1697340342224</updated>
+    </task>
+    <option name="localTasksCounter" value="8" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -167,6 +175,7 @@
     <MESSAGE value="Win Counter and Window Icon" />
     <MESSAGE value="X Player in AI" />
     <MESSAGE value="Kinda Working" />
-    <option name="LAST_COMMIT_MESSAGE" value="Kinda Working" />
+    <MESSAGE value="AI Mostly Working, can still beat it occasionally :(" />
+    <option name="LAST_COMMIT_MESSAGE" value="AI Mostly Working, can still beat it occasionally :(" />
   </component>
 </project>
\ No newline at end of file
Index: src/Computationals.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import javax.swing.*;\r\nimport java.util.Arrays;\r\n\r\npublic class Computationals {\r\n    static int node = 0;\r\n\r\n    private static String[][] deepCopy(String[][] original){\r\n        String[][] copy = new String[original.length][original[0].length];\r\n        for(int i = 0; i < copy.length;i++){\r\n            for (int j = 0;j < copy.length;j++){\r\n                copy[i][j] = original[i][j];\r\n            }\r\n        }\r\n        return copy;\r\n    }\r\n    public static String[][] interpretBoard(JButton[][] board){\r\n        String[][] result = new String[board.length][board[0].length];\r\n        for (int i=0; i<board.length; i++) {\r\n            for (int j=0; j<board[i].length; j++){\r\n                result[i][j] = board[i][j].getText();\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private static boolean hasWon(String x, String[][] board) {\r\n        boolean diagonalOne = true, diagonalTwo = true;\r\n        for (int i = 0; i < 3; i++) {\r\n            if (board[i][0].equals(x) && board[i][1].equals(x) && board[i][2].equals(x)) {\r\n                return true;\r\n            }\r\n            if (board[0][i].equals(x) && board[1][i].equals(x) && board[2][i].equals(x)) {\r\n                return true;\r\n            }\r\n            if (!board[i][i].equals(x)) diagonalOne = false;\r\n            if (!board[i][2 - i].equals(x)) diagonalTwo = false;\r\n        }\r\n        if (diagonalOne || diagonalTwo) {return true;}\r\n        return false;\r\n    }\r\n\r\n    private static int calculateScore(final String[][] board, String letter, int depth){\r\n\r\n        if (hasWon(letter, board)) {for (String[] l1 : board){System.out.println();for (String l2 : l1){if(l2.isBlank()){System.out.print(\"b\");}System.out.print(l2 + \" \");}}System.out.println(\"\\n///////\");return 10;}\r\n\r\n        if (letter.equals(\"X\") && hasWon(\"O\", board)) {System.out.println(\"\\n O wins/////// at \" + depth);printBoardState(board);if(depth < 2)return -1000;return -10;}\r\n\r\n        else if(letter.equals(\"O\") && hasWon(\"X\", board)){System.out.println(\"\\n X wins/////// at \" + depth);printBoardState(board);if(depth < 2)return -1000;return -10;}\r\n\r\n        boolean tie = true;\r\n        for (String[] row : board) {\r\n            for (String x :row){\r\n                if(!x.equals(\"X\") || !x.equals(\"O\")) tie=false;break;\r\n            }\r\n        }\r\n        if(tie) {System.out.println(\"\\nTie /////////////\");printBoardState(board);return 0;}\r\n\r\n        int score = 0; String[][] boardCopy;\r\n        for (int row=0; row<board.length; row++) {\r\n            for (int col=0; col<board[row].length; col++) {\r\n                boardCopy = deepCopy(board);\r\n                if(board[row][col].isBlank()){\r\n                    boardCopy[row][col] = letter;\r\n                    System.out.println(letter + \": [\" + row + \"] [\" + col + \"] : \" + depth);\r\n                    if(letter.equals(\"X\")){score -= calculateScore(boardCopy, \"O\", depth+1);}\r\n                    if(letter.equals(\"O\")){score -= calculateScore(boardCopy, \"X\", depth+1);}\r\n                }\r\n            }\r\n        }\r\n        node++;\r\n        return score;\r\n    }\r\n    public static int[] findBestMove(JButton[][] board, String playa){\r\n        System.out.println(\"New best move\");\r\n        String[][] boardClone = interpretBoard(board);\r\n        String[][] boardCopy;\r\n        int[] coord = new int[2];\r\n        int score=Integer.MIN_VALUE, scoreCopy;\r\n        for(int row=0; row<boardClone.length; row++) {\r\n            for(int col=0;col<boardClone[0].length; col++) {\r\n                boardClone = interpretBoard(board);\r\n                if(boardClone[row][col].isBlank()){\r\n\r\n                    boardCopy = Arrays.copyOf(boardClone, boardClone.length);\r\n                    boardCopy[row][col] = playa;\r\n                    System.out.println(\"\\n\\n--------------------------------\\n[\" + row + \"] [\" + col + \"]\");\r\n                    scoreCopy =  -1 * calculateScore(boardCopy, \"O\", 0);\r\n                    System.out.println(scoreCopy);\r\n                    if(scoreCopy > score){\r\n                        coord[0] = row;coord[1] = col;\r\n                        score = scoreCopy;\r\n                    }\r\n\r\n                }\r\n            }\r\n        }\r\n        System.out.println(node);\r\n        return coord;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    private static void printBoardState(String[][] skibidiDooDaDee){\r\n        for (String[] boogaLoo: skibidiDooDaDee){\r\n            for (String looBooga: boogaLoo){\r\n                if(looBooga.isBlank())System.out.print(\"b\");\r\n                System.out.print(looBooga + \" \");\r\n            }\r\n            System.out.println();\r\n        }\r\n    }\r\n}\r\n
===================================================================
diff --git a/src/Computationals.java b/src/Computationals.java
--- a/src/Computationals.java	
+++ b/src/Computationals.java	
@@ -43,9 +43,9 @@
 
         if (hasWon(letter, board)) {for (String[] l1 : board){System.out.println();for (String l2 : l1){if(l2.isBlank()){System.out.print("b");}System.out.print(l2 + " ");}}System.out.println("\n///////");return 10;}
 
-        if (letter.equals("X") && hasWon("O", board)) {System.out.println("\n O wins/////// at " + depth);printBoardState(board);if(depth < 2)return -1000;return -10;}
+        if (letter.equals("X") && hasWon("O", board)) {/*System.out.println("\n O wins/////// at " + depth);printBoardState(board)*/;if(depth < 2)return -1000+depth*5;return -10;}
 
-        else if(letter.equals("O") && hasWon("X", board)){System.out.println("\n X wins/////// at " + depth);printBoardState(board);if(depth < 2)return -1000;return -10;}
+        else if(letter.equals("O") && hasWon("X", board)){/*System.out.println("\n X wins/////// at " + depth);printBoardState(board)*/;if(depth < 2)return -1000+depth*5;return -10;}
 
         boolean tie = true;
         for (String[] row : board) {
@@ -61,7 +61,7 @@
                 boardCopy = deepCopy(board);
                 if(board[row][col].isBlank()){
                     boardCopy[row][col] = letter;
-                    System.out.println(letter + ": [" + row + "] [" + col + "] : " + depth);
+                    //System.out.println(letter + ": [" + row + "] [" + col + "] : " + depth);
                     if(letter.equals("X")){score -= calculateScore(boardCopy, "O", depth+1);}
                     if(letter.equals("O")){score -= calculateScore(boardCopy, "X", depth+1);}
                 }
